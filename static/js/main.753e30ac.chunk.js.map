{"version":3,"sources":["components/card/Card.js","firebase.js","redux/charsDuck.js","components/home/HomePage.js","components/favs/FavPage.js","redux/userDucks.js","components/login/LoginPage.js","Routes.js","App.js","serviceWorker.js","redux/store.js","index.js","components/card/card.module.css","components/home/home.module.css","components/favs/favs.module.css","components/login/login.module.css"],"names":["onClick","side","console","log","Card","name","image","rightClick","leftClick","hide","className","styles","container","card","alt","src","actions","left","size","right","defaultProps","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","collection","initialData","fetching","array","current","favorites","nextPage","client","ApolloClient","uri","retriveFavs","dispatch","getState","type","uid","doc","get","then","snap","data","getFavs","user","payload","catch","e","message","getCharactersAction","query","gql","characters","variables","page","error","results","info","next","connect","state","chars","removeCharacterAction","shift","length","addFavoritesAction","char","push","set","updateDB","nextCharacter","addFav","color","renderCharacter","map","i","key","loggedIn","doGoogleLoginAction","provider","auth","GoogleAuthProvider","signInWithPopup","loginWithGoogle","storage","dispalyName","displayName","email","photoUrl","photoURL","localStorage","JSON","stringify","logOutAction","signOut","removeItem","PrivateRoute","path","component","rest","getItem","parse","exact","to","Routes","Home","FavPage","LoginPage","App","activeClassName","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","restoreSessionAction","generateStore","WithRouter","WithStore","WithApollo","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.753e30ac.chunk.js","sourcesContent":["import React from 'react'\r\nimport styles from './card.module.css'\r\nimport FontAwesome from 'react-fontawesome'\r\nimport PropTypes from 'prop-types'\r\n\r\nlet rick = \"https://rickandmortyapi.com/api/character/avatar/1.jpeg\"\r\n\r\nfunction onClick(side) {\r\n    return () => console.log(side)\r\n}\r\n\r\nexport default function Card({\r\n    name, image, rightClick, leftClick, hide\r\n}) {\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.card}>\r\n                <img alt=\"rick\" src={image} />\r\n                <p className={styles.name}>\r\n                    {name}\r\n                </p>\r\n                {!hide && <div className={styles.actions}>\r\n                    <div\r\n                        onClick={leftClick || onClick(\"left\")}\r\n                        className={styles.left}>\r\n                        <FontAwesome\r\n                            name=\"thumbs-down\"\r\n                            size=\"2x\"\r\n                        />\r\n                    </div>\r\n                    <div\r\n                        onClick={rightClick || onClick(\"right\")}\r\n                        className={styles.right}>\r\n                        <FontAwesome\r\n                            name=\"heart\"\r\n                            size=\"2x\"\r\n                        />\r\n                    </div>\r\n                </div>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nCard.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    image: PropTypes.string.isRequired,\r\n    leftClick: PropTypes.func,\r\n    rightClick: PropTypes.func,\r\n}\r\n\r\nCard.defaultProps = {\r\n    name: \"Rick Sanches\",\r\n    image: rick,\r\n}","import firebase from 'firebase/app'\r\nimport 'firebase/auth'\r\nimport 'firebase/firestore'\r\n\r\nlet firebaseConfig = {\r\n    apiKey: \"AIzaSyAoZ-1yoD6hTP3hR1WFAPSmEpjzWODZvtM\",\r\n    authDomain: \"react-rym.firebaseapp.com\",\r\n    databaseURL: \"https://react-rym.firebaseio.com\",\r\n    projectId: \"react-rym\",\r\n    storageBucket: \"react-rym.appspot.com\",\r\n    messagingSenderId: \"604166040881\",\r\n    appId: \"1:604166040881:web:20b0715d749d28de7d1410\",\r\n    measurementId: \"G-MTHG9VY085\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n  //firebase.analytics();\r\n\r\n let db = firebase.firestore().collection('favs')\r\n\r\nexport function getFavs(uid) {\r\n  return db.doc(uid).get()\r\n    .then(snap => {\r\n      return snap.data().array\r\n    })\r\n}\r\n\r\nexport function updateDB( array, uid ) {\r\n  return db.doc(uid).set({ array })\r\n}\r\n\r\n  export function singOutGoogle() {\r\n    firebase.auth().signOut()\r\n  }\r\n\r\n  export function loginWithGoogle() {\r\n      let provider = new firebase.auth.GoogleAuthProvider()\r\n      return firebase.auth().signInWithPopup(provider)\r\n        .then(snap => snap.user)\r\n  }\r\n","import axios from 'axios'\r\nimport { updateDB, getFavs } from '../firebase'\r\nimport ApolloClient, {gql} from 'apollo-boost'\r\n\r\n// constantes\r\nlet initialData= {\r\n    fetching: false,\r\n    array:[],\r\n    current: {},\r\n    favorites: [],\r\n    nextPage: 1\r\n} \r\nlet URL = \"https://rickandmortyapi.com/api/character\"\r\n\r\nlet client = new ApolloClient({\r\n    uri: \"https://rickandmortyapi.com/graphql\"\r\n})\r\n\r\nlet UPDATE_PAGE = \"UPDATE_PAGE\"\r\n\r\nlet GET_CHARACTERS = \"GET_CHARACTERS\"\r\nlet GET_CHARACTERS_SUCCESS = \"GET_CHARACTERS_SUCCESS\"\r\nlet GET_CHARACTERS_ERROR = \"GET_CHARACTERS_ERROR\"\r\n\r\nlet REMOVE_CHARACTER = \"REMOVE_CHARACTER\"\r\nlet ADD_TO_FAVORITES = \"ADD_TO_FAVORITES\"\r\n\r\nlet GET_FAVS = \"GET_FAVS\"\r\nlet GET_FAVS_SUCCESS = \"GET_FAVS_SUCCESS\"\r\nlet GET_FAVS_ERROR = \"GET_FAVS_ERROR\"\r\n\r\n// reducer\r\nexport default function reducer(state = initialData, action) {\r\n    switch (action.type) {\r\n        case UPDATE_PAGE:\r\n            return { ...state, nextPage: action.payload }\r\n\r\n        case GET_FAVS_SUCCESS:\r\n            return { ...state, fetching: false, favorites: action.payload }\r\n        case GET_FAVS_ERROR:\r\n            return { ...state, fetching: false, error: action.payload }\r\n        case GET_FAVS:\r\n            return { ...state, fetching: true }\r\n\r\n        case ADD_TO_FAVORITES:\r\n            return { ...state, ...action.payload }\r\n        case REMOVE_CHARACTER:\r\n            return { ...state, array: action.payload }\r\n\r\n        case GET_CHARACTERS:\r\n            return { ...state, fetching: true }\r\n        case GET_CHARACTERS_ERROR:\r\n            return { ...state, fetching: false, error: action.payload }\r\n        case GET_CHARACTERS_SUCCESS:\r\n            return { ...state, array: action.payload, fetching: false }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions (thunks)\r\nexport let retriveFavs = () => (dispatch, getState) => {\r\n    dispatch({\r\n        type: GET_FAVS\r\n    })\r\n    let { uid } = getState().user\r\n    return getFavs(uid)\r\n        .then(array => {\r\n            dispatch({\r\n                type: GET_FAVS_SUCCESS,\r\n                payload: [...array]\r\n            })\r\n        })\r\n        .catch(e => {\r\n            console.log(e)\r\n            dispatch({\r\n                type: GET_FAVS_ERROR,\r\n                payload: e.message\r\n            })\r\n        })\r\n}\r\n\r\nexport let addFavoritesAction = () => ( dispatch, getState) => {\r\n    let { array, favorites } = getState().characters\r\n    let { uid } = getState().user \r\n    let char = array.shift()\r\n    favorites.push(char)\r\n    updateDB(favorites, uid)\r\n    dispatch({\r\n        type: ADD_TO_FAVORITES,\r\n        payload: { array:[...array], favorites:[...favorites] }\r\n    })\r\n}\r\n\r\nexport let removeCharacterAction = () => (dispatch, getState) => {\r\n    // ?? donde estan los characters\r\n    let { array } = getState().characters\r\n    array.shift()\r\n    if (!array.length) {\r\n        getCharactersAction()(dispatch, getState)\r\n        return\r\n    }\r\n    dispatch({\r\n        type: REMOVE_CHARACTER,\r\n        payload: [...array]\r\n    })\r\n}\r\n\r\nexport let getCharactersAction = () => (dispatch, getState) => {\r\n    let query = gql`\r\n    query ($page:Int) {\r\n        characters (page:$page){\r\n          info{\r\n            pages\r\n            next\r\n            prev\r\n          }\r\n          results{\r\n            name\r\n            image\r\n          }\r\n        }\r\n      }\r\n    `\r\n    dispatch({\r\n        type: GET_CHARACTERS\r\n    })\r\n    let { nextPage } = getState().characters\r\n    return client.query({\r\n        query,\r\n        variables: { page: nextPage }\r\n    })\r\n    .then(({ data, error }) => {\r\n            if (error) {\r\n                dispatch({\r\n                    type: GET_CHARACTERS_ERROR,\r\n                    payload: error\r\n                })\r\n                return\r\n            }\r\n            dispatch({\r\n                type: GET_CHARACTERS_SUCCESS,\r\n                payload: data.characters.results\r\n            })\r\n            dispatch({\r\n                type: UPDATE_PAGE,\r\n                payload: data.characters.info.next ? data.characters.info.next : 1\r\n            })\r\n        })\r\n\r\n    // dispatch({\r\n    //     type: GET_CHARACTERS\r\n    // })\r\n    // return axios.get(URL)\r\n    //     .then(res => {\r\n    //         dispatch({\r\n    //             type:GET_CHARACTERS_SUCCESS,\r\n    //             payload: res.data.results\r\n    //         })\r\n    //     })\r\n    //     .catch(err=>{\r\n    //         console.log(err)\r\n    //         dispatch({\r\n    //             type: GET_CHARACTERS_ERROR,\r\n    //             payload: err.response.message\r\n    //         })\r\n    //     })\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport Card from '../card/Card'\r\nimport styles from './home.module.css'\r\nimport { connect } from 'react-redux'\r\nimport { removeCharacterAction, addFavoritesAction } from '../../redux/charsDuck'\r\n\r\nfunction Home({ chars,  removeCharacterAction, addFavoritesAction }) {\r\n\r\n    function renderCharacter() {\r\n        let char = chars[0]\r\n        return (\r\n            <Card \r\n                rightClick={ addFav }\r\n                leftClick={ nextCharacter } \r\n                { ...char } \r\n            />\r\n        )\r\n    }\r\n\r\n    function nextCharacter() {\r\n        removeCharacterAction()\r\n    }\r\n\r\n    function addFav() {\r\n        addFavoritesAction()\r\n    }\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <h2>Personajes de Rick y Morty</h2>\r\n            <p className=\"home-p\">Toca la imagen del <font color=\"red\">Lado Derecho</font> para pasar al <b>Siguiente</b></p>\r\n            <p className=\"home-p\">O del <font color=\"green\">Lado Izquierdo</font> para agregar al personaje a <b>Favoritos</b></p>\r\n            <div>\r\n                {renderCharacter()}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction mapState(state){\r\n    return {\r\n        chars: state.characters.array\r\n    }\r\n}\r\n\r\nexport default connect(mapState, { removeCharacterAction, addFavoritesAction })(Home)","import React from 'react'\r\nimport styles from './favs.module.css'\r\nimport Card from '../card/Card'\r\nimport { connect } from 'react-redux'\r\n\r\nfunction FavPage({ characters = [0] }) {\r\n    function renderCharacter(char, i) {\r\n        return (\r\n            <Card hide { ...char } key={i} />\r\n        )\r\n    }\r\n    return (\r\n        <div className={styles.container}>\r\n            <h2>Favoritos</h2>\r\n            {characters.map(renderCharacter)}\r\n            {!characters.length && <h3>No hay personajes agregados</h3>}\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction mapState({ characters }) {\r\n    return {\r\n        characters: characters.favorites\r\n    }\r\n}\r\n\r\nexport default connect(mapState)(FavPage)","import { loginWithGoogle, singOutGoogle } from '../firebase'\r\nimport { retriveFavs } from './charsDuck'\r\n// constanst\r\nlet initialData = {\r\n    loggedIn: false,\r\n    fetching: false\r\n}\r\nlet LOGGIN = \"LOGGIN\"\r\nlet LOGGIN_SUCCESS = \"LOGGIN_SUCCESS\"\r\nlet LOGGIN_ERROR = \"LOGGIN_ERROR\"\r\n\r\nlet LOG_OUT = \"LOG_OUT\"\r\n\r\n// reducer\r\nexport default function reducer(state = initialData, action) {\r\n    switch(action.type) {\r\n        case LOG_OUT:\r\n            return { ...initialData }\r\n\r\n        case LOGGIN:\r\n            return { ...state, fetching: true }\r\n        case LOGGIN_SUCCESS:\r\n            return { ...state, fetching: false, ...action.payload, loggedIn: true }\r\n        case LOGGIN_ERROR:\r\n            return { ...state, fetching: false, error: action.payload }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// aux\r\nfunction saveStorage(storage) {\r\n    localStorage.storage = JSON.stringify(storage)\r\n}\r\n\r\n// action (action creator)\r\nexport let logOutAction = () => (dispatch, getState) => {\r\n    singOutGoogle()\r\n    dispatch({\r\n        type: LOG_OUT\r\n    })\r\n    localStorage.removeItem('storage')\r\n}\r\n\r\nexport let restoreSessionAction = () => dispatch => {\r\n    let storage = localStorage.getItem('storage')\r\n    storage = JSON.parse(storage)\r\n    if ( storage && storage.user ) {\r\n        dispatch({\r\n            type: LOGGIN_SUCCESS,\r\n            payload: storage.user\r\n        })\r\n    }\r\n}\r\n\r\nexport let doGoogleLoginAction = () => ( dispatch, getState ) => {\r\n    dispatch({\r\n        type: LOGGIN\r\n    })\r\n    return loginWithGoogle()\r\n        .then(user => {\r\n            dispatch({\r\n                type: LOGGIN_SUCCESS,\r\n                payload: {\r\n                    uid: user.uid,\r\n                    dispalyName: user.displayName,\r\n                    email: user.email,\r\n                    photoUrl: user.photoURL\r\n                }\r\n            })\r\n            saveStorage(getState())\r\n            retriveFavs()(dispatch, getState)\r\n        })\r\n        .catch(e => {\r\n            console.log(e)\r\n            dispatch({\r\n                type: LOGGIN_ERROR,\r\n                payload: e.message\r\n            })\r\n        })\r\n}","import React from 'react'\r\nimport styles from './login.module.css'\r\nimport { connect } from 'react-redux'\r\nimport { doGoogleLoginAction, logOutAction } from '../../redux/userDucks'\r\n\r\nfunction LoginPage({ loggedIn, fetching, doGoogleLoginAction, logOutAction }) {\r\n\r\n    function doLogin() {\r\n        doGoogleLoginAction()\r\n    }\r\n\r\n    function doLogOut() {\r\n        logOutAction()\r\n    }\r\n\r\n    if (fetching) return <h2>Cargando ...</h2>\r\n    return (\r\n        <div className={styles.container}>\r\n            { loggedIn ? <h1>\r\n                Cierra tu sesión\r\n            </h1> : <div><h1>\r\n                Inicia Sesión con Google\r\n            </h1>\r\n            <p>Debes iniciar sesión para acceder al Inicio y a Favoritos</p></div>}\r\n            \r\n            { loggedIn ? <button onClick={doLogOut}>\r\n                Cerrar Sesión\r\n            </button> : <button onClick={doLogin}>\r\n                Iniciar\r\n            </button>}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nfunction mapState({ user: { fetching, loggedIn } }) {\r\n    return {\r\n        fetching,\r\n        loggedIn\r\n    }\r\n}\r\n\r\nexport default connect(mapState, { doGoogleLoginAction, logOutAction })(LoginPage)","import React from 'react'\r\nimport { Switch, Route, Redirect } from 'react-router-dom'\r\nimport Home from './components/home/HomePage'\r\nimport FavPage from './components/favs/FavPage'\r\nimport LoginPage from './components/login/LoginPage'\r\nimport GraphQlHome from './components/home/GraphQlHome'\r\n\r\nfunction PrivateRoute({ path, component, ...rest }) {\r\n    let storage = localStorage.getItem('storage')\r\n    storage = JSON.parse(storage)\r\n    if ( storage && storage.user ) {\r\n        return <Route path={path} component={ component } { ...rest } />\r\n    }\r\n    else {\r\n        return <Redirect exact to=\"/\" { ...rest } />\r\n    }\r\n}\r\n\r\nexport default function Routes() {\r\n    return (\r\n        <Switch>\r\n            <PrivateRoute path=\"/inicio\" component={Home} />\r\n            <PrivateRoute path=\"/favs\" component={FavPage} />\r\n            <Route exact path=\"/\" component={LoginPage} />\r\n        </Switch>\r\n    )\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport { NavLink } from 'react-router-dom'\r\nimport Routes from './Routes';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <div className=\"nav-bar\">\r\n        <NavLink className=\"link\" activeClassName=\"active\" to=\"/inicio\">\r\n          Inicio\r\n        </NavLink>\r\n        <NavLink className=\"link\" activeClassName=\"active\" to=\"/favs\">\r\n          Favoritos\r\n        </NavLink>\r\n        <NavLink className=\"link\" activeClassName=\"active\" exact to=\"/\">\r\n          Login\r\n        </NavLink>\r\n      </div>\r\n      <Routes />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { createStore, combineReducers, compose, applyMiddleware } from 'redux';\r\nimport userReducer, { restoreSessionAction } from './userDucks';\r\nimport charsReducer, { getCharactersAction } from './charsDuck';\r\nimport thunk from 'redux-thunk';\r\n\r\nlet rootReducer = combineReducers({\r\n    user: userReducer,\r\n    characters: charsReducer\r\n})\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport default function generateStore() {\r\n    let store = createStore(\r\n        rootReducer,\r\n        composeEnhancers(applyMiddleware(thunk))\r\n    )\r\n    //consiguiendo los personajes por primera vez\r\n    getCharactersAction()(store.dispatch, store.getState)\r\n    restoreSessionAction()(store.dispatch)\r\n    return store\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom'\r\nimport 'font-awesome/css/font-awesome.css'\r\nimport { Provider } from 'react-redux'\r\nimport generateStore from './redux/store'\r\nimport ApolloClient from 'apollo-boost'\r\nimport { ApolloProvider, withApollo } from 'react-apollo'\r\n\r\nlet store = generateStore()\r\n\r\nlet client = new ApolloClient({\r\n    uri: \"https://rickandmortyapi.com/graphql\"\r\n})\r\n\r\nlet WithRouter = () => <BrowserRouter><App /></BrowserRouter>\r\nlet WithStore = () => <Provider store={store} > <WithRouter /> </Provider>\r\nlet WithApollo = () => <ApolloProvider client={client}> <WithStore /> </ApolloProvider>\r\n\r\nReactDOM.render(<WithApollo />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"card_container__3eit5\",\"card\":\"card_card__2vPM5\",\"name\":\"card_name__2tua_\",\"actions\":\"card_actions__2a7mp\",\"left\":\"card_left__QcBQJ\",\"right\":\"card_right__2PXrV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"home_container__2UxNR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"favs_container__maych\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"login_container__Fx8Hv\"};"],"sourceRoot":""}